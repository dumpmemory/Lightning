warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.15s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 56.91s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.95s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.14s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.69s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.87s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.11s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.07s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.53s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.18s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.50s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.27s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 56.76s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.95s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 56.69s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.10s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 56.82s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.93s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.63s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.40s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.57s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.35s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1634:9
     |
1634 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1635:9
     |
1635 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1636:9
     |
1636 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1637:9
     |
1637 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1638:9
     |
1638 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1639:9
     |
1639 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1923:8
     |
1923 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1922:12
     |
1922 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2002:8
     |
2002 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 40 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ...    Compiling lightning-containers v0.2.2 (/home/shisoft/Dropbox/Code/OSS Projects/Lightning)
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1109:32
     |
1109 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1641:9
     |
1641 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1642:9
     |
1642 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1643:9
     |
1643 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1644:9
     |
1644 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1645:9
     |
1645 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1646:9
     |
1646 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:617:8
    |
617 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1930:8
     |
1930 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1929:12
     |
1929 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2009:8
     |
2009 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 5.34s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... error: test failed, to rerun pass '--lib'

Caused by:
  process didn't exit successfully: `/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791 word_map --test-threads=1` (signal: 15, SIGTERM: termination signal)
   Compiling lightning-containers v0.2.2 (/home/shisoft/Dropbox/Code/OSS Projects/Lightning)
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1112:32
     |
1112 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1644:9
     |
1644 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1645:9
     |
1645 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1646:9
     |
1646 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1647:9
     |
1647 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1648:9
     |
1648 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1649:9
     |
1649 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:620:8
    |
620 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1933:8
     |
1933 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1932:12
     |
1932 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2012:8
     |
2012 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 5.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... FAILED
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

failures:

---- map::word_map::test::parallel_with_resize stdout ----
thread '<unnamed>' panicked at 'assertion failed: `(left == right)`
  left: `Some(3511)`,
 right: `None`: Remove recursion, epoch 9', src/map/word_map.rs:408:27
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Any { .. }', src/map/word_map.rs:431:27


failures:
    map::word_map::test::parallel_with_resize

test result: FAILED. 14 passed; 1 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.60s

error: test failed, to rerun pass '--lib'
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1112:32
     |
1112 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1644:9
     |
1644 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1645:9
     |
1645 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1646:9
     |
1646 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1647:9
     |
1647 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1648:9
     |
1648 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1649:9
     |
1649 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:620:8
    |
620 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1933:8
     |
1933 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1932:12
     |
1932 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2012:8
     |
2012 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.66s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1112:32
     |
1112 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1644:9
     |
1644 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1645:9
     |
1645 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1646:9
     |
1646 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1647:9
     |
1647 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1648:9
     |
1648 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1649:9
     |
1649 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:620:8
    |
620 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1933:8
     |
1933 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1932:12
     |
1932 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2012:8
     |
2012 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... FAILED
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

failures:

---- map::word_map::test::parallel_with_resize stdout ----
thread '<unnamed>' panicked at 'assertion failed: `(left == right)`
  left: `Some(3511)`,
 right: `None`: Remove recursion, epoch 9', src/map/word_map.rs:408:27
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::panicking::assert_failed_inner
   3: core::panicking::assert_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:181:5
   4: lightning::map::word_map::test::parallel_with_resize::{{closure}}
             at ./src/map/word_map.rs:408:27
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Any { .. }', src/map/word_map.rs:431:27
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::result::unwrap_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1805:5
   3: core::result::Result<T,E>::unwrap
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1098:23
   4: lightning::map::word_map::test::parallel_with_resize
             at ./src/map/word_map.rs:431:13
   5: lightning::map::word_map::test::parallel_with_resize::{{closure}}
             at ./src/map/word_map.rs:352:5
   6: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
   7: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.


failures:
    map::word_map::test::parallel_with_resize

test result: FAILED. 14 passed; 1 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.78s

error: test failed, to rerun pass '--lib'
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1112:32
     |
1112 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1644:9
     |
1644 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1645:9
     |
1645 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1646:9
     |
1646 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1647:9
     |
1647 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1648:9
     |
1648 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1649:9
     |
1649 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:620:8
    |
620 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1933:8
     |
1933 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1932:12
     |
1932 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2012:8
     |
2012 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.57s

warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1112:32
     |
1112 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1644:9
     |
1644 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1645:9
     |
1645 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1646:9
     |
1646 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1647:9
     |
1647 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1648:9
     |
1648 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1649:9
     |
1649 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:620:8
    |
620 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1933:8
     |
1933 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1932:12
     |
1932 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2012:8
     |
2012 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:264:5
    |
262 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
263 |     addr: usize,
264 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:872:11
    |
872 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... FAILED
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

failures:

---- map::word_map::test::parallel_with_resize stdout ----
thread '<unnamed>' panicked at 'assertion failed: `(left == right)`
  left: `Some(3511)`,
 right: `None`: Remove recursion, epoch 9', src/map/word_map.rs:408:27
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::panicking::assert_failed_inner
   3: core::panicking::assert_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:181:5
   4: lightning::map::word_map::test::parallel_with_resize::{{closure}}
             at ./src/map/word_map.rs:408:27
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread '<unnamed>' panicked at 'assertion failed: `(left == right)`
  left: `Some(5007)`,
 right: `None`: Remove recursion, epoch 9', src/map/word_map.rs:408:27
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::panicking::assert_failed_inner
   3: core::panicking::assert_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:181:5
   4: lightning::map::word_map::test::parallel_with_resize::{{closure}}
             at ./src/map/word_map.rs:408:27
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Any { .. }', src/map/word_map.rs:431:27
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::result::unwrap_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1805:5
   3: core::result::Result<T,E>::unwrap
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1098:23
   4: lightning::map::word_map::test::parallel_with_resize
             at ./src/map/word_map.rs:431:13
   5: lightning::map::word_map::test::parallel_with_resize::{{closure}}
             at ./src/map/word_map.rs:352:5
   6: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
   7: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.


failures:
    map::word_map::test::parallel_with_resize

test result: FAILED. 14 passed; 1 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.44s

error: test failed, to rerun pass '--lib'
error: test failed, to rerun pass '--lib'

Caused by:
  process didn't exit successfully: `/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791 word_map --test-threads=1` (signal: 15, SIGTERM: termination signal)
2022-07-13 06:38:54
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.47s

2022-07-13 06:39:54
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... FAILED
test map::word_map::test::will_not_overflow ... ok

failures:

---- map::word_map::test::swap_with_resize stdout ----
thread '<unnamed>' panicked at 'assertion failed: `(left == right)`
  left: `Some(270000006)`,
 right: `Some(270000007)`: Value checking after swap at epoch 1', src/map/word_map.rs:694:21
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::panicking::assert_failed_inner
   3: core::panicking::assert_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:181:5
   4: lightning::map::word_map::test::swap_with_resize::{{closure}}
             at ./src/map/word_map.rs:694:21
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Any { .. }', src/map/word_map.rs:725:51
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::result::unwrap_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1805:5
   3: core::result::Result<T,E>::unwrap
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1098:23
   4: lightning::map::word_map::test::swap_with_resize::{{closure}}
             at ./src/map/word_map.rs:725:42
   5: core::iter::traits::iterator::Iterator::for_each::call::{{closure}}
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:828:29
   6: core::iter::traits::iterator::Iterator::fold
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:2414:21
   7: core::iter::traits::iterator::Iterator::for_each
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:831:9
   8: lightning::map::word_map::test::swap_with_resize
             at ./src/map/word_map.rs:725:9
   9: lightning::map::word_map::test::swap_with_resize::{{closure}}
             at ./src/map/word_map.rs:657:5
  10: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
  11: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.


failures:
    map::word_map::test::swap_with_resize

test result: FAILED. 14 passed; 1 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.78s

error: test failed, to rerun pass '--lib'
2022-07-13 07:17:24
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.21s

2022-07-13 07:18:22
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.21s

2022-07-13 07:19:22
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.23s

2022-07-13 07:20:21
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.45s

2022-07-13 07:21:20
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.94s

2022-07-13 07:22:20
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.35s

2022-07-13 07:23:20
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.94s

2022-07-13 07:24:20
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.74s

2022-07-13 07:25:20
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.88s

2022-07-13 07:26:19
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.98s

2022-07-13 07:27:20
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 60.10s

2022-07-13 07:28:21
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.30s

2022-07-13 07:29:20
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.33s

2022-07-13 07:30:20
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.29s

2022-07-13 07:31:19
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.40s

2022-07-13 07:32:19
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.34s

2022-07-13 07:33:19
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:277:23
    |
277 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... FAILED
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

failures:

---- map::word_map::test::parallel_hybrid stdout ----
thread '<unnamed>' panicked at 'attempt to subtract with overflow', src/map/word_map.rs:61:27
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::panicking::panic
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:48:5
   3: <lightning::map::word_map::WordMap<ALLOC,H> as lightning::map::Map<usize,usize>>::remove::{{closure}}
             at ./src/map/word_map.rs:61:27
   4: core::option::Option<T>::map
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/option.rs:929:29
   5: <lightning::map::word_map::WordMap<ALLOC,H> as lightning::map::Map<usize,usize>>::remove
             at ./src/map/word_map.rs:59:9
   6: lightning::map::word_map::test::parallel_hybrid::{{closure}}
             at ./src/map/word_map.rs:476:21
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread '<unnamed>' panicked at 'attempt to subtract with overflow', src/map/word_map.rs:61:27
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::panicking::panic
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:48:5
   3: <lightning::map::word_map::WordMap<ALLOC,H> as lightning::map::Map<usize,usize>>::remove::{{closure}}
             at ./src/map/word_map.rs:61:27
   4: core::option::Option<T>::map
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/option.rs:929:29
   5: <lightning::map::word_map::WordMap<ALLOC,H> as lightning::map::Map<usize,usize>>::remove
             at ./src/map/word_map.rs:59:9
   6: lightning::map::word_map::test::parallel_hybrid::{{closure}}
             at ./src/map/word_map.rs:476:21
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Any { .. }', src/map/word_map.rs:481:27
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::result::unwrap_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1805:5
   3: core::result::Result<T,E>::unwrap
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1098:23
   4: lightning::map::word_map::test::parallel_hybrid
             at ./src/map/word_map.rs:481:13
   5: lightning::map::word_map::test::parallel_hybrid::{{closure}}
             at ./src/map/word_map.rs:457:5
   6: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
   7: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.


failures:
    map::word_map::test::parallel_hybrid

test result: FAILED. 14 passed; 1 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.93s

error: test failed, to rerun pass '--lib'
2022-07-13 07:42:02
   Compiling lightning-containers v0.2.2 (/home/shisoft/Dropbox/Code/OSS Projects/Lightning)
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:280:23
    |
280 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 4.73s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.54s

2022-07-13 07:43:05
   Compiling lightning-containers v0.2.2 (/home/shisoft/Dropbox/Code/OSS Projects/Lightning)
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:280:23
    |
280 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 1.71s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.83s

2022-07-13 07:44:06
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:280:23
    |
280 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.84s

2022-07-13 07:45:06
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:280:23
    |
280 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.48s

2022-07-13 07:46:06
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:280:23
    |
280 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.97s

2022-07-13 07:47:06
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:280:23
    |
280 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.95s

2022-07-13 07:48:05
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:280:23
    |
280 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 60.02s

2022-07-13 07:49:06
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:280:23
    |
280 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... FAILED
test map::word_map::test::will_not_overflow ... ok

failures:

---- map::word_map::test::swap_with_resize stdout ----
thread '<unnamed>' panicked at 'assertion failed: `(left == right)`
  left: `Some(440000096)`,
 right: `Some(440000097)`: Value checking after swap at epoch 3', src/map/word_map.rs:697:21
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::panicking::assert_failed_inner
   3: core::panicking::assert_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:181:5
   4: lightning::map::word_map::test::swap_with_resize::{{closure}}
             at ./src/map/word_map.rs:697:21
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Any { .. }', src/map/word_map.rs:728:51
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::result::unwrap_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1805:5
   3: core::result::Result<T,E>::unwrap
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1098:23
   4: lightning::map::word_map::test::swap_with_resize::{{closure}}
             at ./src/map/word_map.rs:728:42
   5: core::iter::traits::iterator::Iterator::for_each::call::{{closure}}
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:828:29
   6: core::iter::traits::iterator::Iterator::fold
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:2414:21
   7: core::iter::traits::iterator::Iterator::for_each
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:831:9
   8: lightning::map::word_map::test::swap_with_resize
             at ./src/map/word_map.rs:728:9
   9: lightning::map::word_map::test::swap_with_resize::{{closure}}
             at ./src/map/word_map.rs:660:5
  10: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
  11: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.


failures:
    map::word_map::test::swap_with_resize

test result: FAILED. 14 passed; 1 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.66s

error: test failed, to rerun pass '--lib'
2022-07-13 14:49:42
   Compiling lightning-containers v0.2.2 (/home/shisoft/Dropbox/Code/OSS Projects/Lightning)
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 4.72s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.33s

2022-07-13 14:50:46
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.03s

2022-07-13 14:51:44
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.98s

2022-07-13 14:52:45
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.37s

2022-07-13 14:53:45
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.16s

2022-07-13 14:54:43
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.67s

2022-07-13 14:55:42
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... FAILED
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

failures:

---- map::word_map::test::parallel_hybrid stdout ----
thread '<unnamed>' panicked at 'Got illegal value 6', src/map/word_map.rs:60:13
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: <lightning::map::word_map::WordMap<ALLOC,H> as lightning::map::Map<usize,usize>>::remove::{{closure}}
             at ./src/map/word_map.rs:60:13
   3: core::option::Option<T>::map
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/option.rs:929:29
   4: <lightning::map::word_map::WordMap<ALLOC,H> as lightning::map::Map<usize,usize>>::remove
             at ./src/map/word_map.rs:59:9
   5: lightning::map::word_map::test::parallel_hybrid::{{closure}}
             at ./src/map/word_map.rs:477:21
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Any { .. }', src/map/word_map.rs:482:27
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::result::unwrap_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1805:5
   3: core::result::Result<T,E>::unwrap
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1098:23
   4: lightning::map::word_map::test::parallel_hybrid
             at ./src/map/word_map.rs:482:13
   5: lightning::map::word_map::test::parallel_hybrid::{{closure}}
             at ./src/map/word_map.rs:458:5
   6: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
   7: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.


failures:
    map::word_map::test::parallel_hybrid

test result: FAILED. 14 passed; 1 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.23s

error: test failed, to rerun pass '--lib'
2022-07-13 15:07:27
   Compiling lightning-containers v0.2.2 (/home/shisoft/Dropbox/Code/OSS Projects/Lightning)
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 4.31s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.22s

2022-07-13 15:08:30
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.16s

2022-07-13 15:09:28
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 56.64s

2022-07-13 15:10:25
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.52s

2022-07-13 15:11:24
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.00s

2022-07-13 15:12:22
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.16s

2022-07-13 15:13:21
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.08s

2022-07-13 15:14:20
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.80s

2022-07-13 15:15:18
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.11s

2022-07-13 15:16:18
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.34s

2022-07-13 15:17:16
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.89s

2022-07-13 15:18:14
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.59s

2022-07-13 15:19:13
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.40s

2022-07-13 15:20:12
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.87s

2022-07-13 15:21:10
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.47s

2022-07-13 15:22:09
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.92s

2022-07-13 15:23:07
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.23s

2022-07-13 15:24:05
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.59s

2022-07-13 15:25:04
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.54s

2022-07-13 15:26:03
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.43s

2022-07-13 15:27:01
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.22s

2022-07-13 15:28:00
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.12s

2022-07-13 15:28:58
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.58s

2022-07-13 15:29:56
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.72s

2022-07-13 15:30:56
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.36s

2022-07-13 15:31:55
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.81s

2022-07-13 15:32:53
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.75s

2022-07-13 15:33:52
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.46s

2022-07-13 15:34:51
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.32s

2022-07-13 15:35:50
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.83s

2022-07-13 15:36:49
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.09s

2022-07-13 15:37:48
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.59s

2022-07-13 15:38:47
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.49s

2022-07-13 15:39:46
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.09s

2022-07-13 15:40:45
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 56.90s

2022-07-13 15:41:42
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.60s

2022-07-13 15:42:42
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.24s

2022-07-13 15:43:41
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.83s

2022-07-13 15:44:41
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.83s

2022-07-13 15:45:40
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.29s

2022-07-13 15:46:39
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.24s

2022-07-13 15:47:38
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 59.61s

2022-07-13 15:48:38
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.97s

2022-07-13 15:49:36
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.62s

2022-07-13 15:50:35
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.65s

2022-07-13 15:51:34
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.16s

2022-07-13 15:52:33
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... ok
test map::word_map::test::will_not_overflow ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 69 filtered out; finished in 58.20s

2022-07-13 15:53:31
warning: the feature `inherent_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes
 --> src/lib.rs:7:12
  |
7 | #![feature(inherent_associated_types)]
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(incomplete_features)]` on by default
  = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information

warning: unused `#[macro_use]` import
  --> src/lib.rs:13:1
   |
13 | #[macro_use]
   | ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `thread`
 --> src/map/base.rs:1:22
  |
1 | use std::{sync::Arc, thread};
  |                      ^^^^^^

warning: unused import: `time::Duration`
   --> src/map/word_map.rs:278:23
    |
278 |     use std::{thread, time::Duration};
    |                       ^^^^^^^^^^^^^^

warning: unused import: `ManuallyDrop`
 --> src/aarc.rs:1:22
  |
1 | use std::mem::{self, ManuallyDrop};
  |                      ^^^^^^^^^^^^

warning: unused import: `ptr`
  --> src/thread_local.rs:10:16
   |
10 | use std::{mem, ptr};
   |                ^^^

warning: the feature `const_fn_trait_bound` has been stable since 1.61.0 and no longer requires an attribute to enable
 --> src/lib.rs:3:12
  |
3 | #![feature(const_fn_trait_bound)]
  |            ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unused variable: `orig_key`
    --> src/map/base.rs:1171:32
     |
1171 |     fn wait_entry(addr: usize, orig_key: FKey, orig_val: FVal, backoff: &Backoff) {
     |                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_orig_key`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `fkey`
    --> src/map/base.rs:1703:9
     |
1703 |         fkey: FKey,
     |         ^^^^ help: if this is intentional, prefix it with an underscore: `_fkey`

warning: unused variable: `old_idx`
    --> src/map/base.rs:1704:9
     |
1704 |         old_idx: usize,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_idx`

warning: unused variable: `fvalue`
    --> src/map/base.rs:1705:9
     |
1705 |         fvalue: FastValue,
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_fvalue`

warning: unused variable: `old_chunk_ins`
    --> src/map/base.rs:1706:9
     |
1706 |         old_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_chunk_ins`

warning: unused variable: `new_chunk_ins`
    --> src/map/base.rs:1707:9
     |
1707 |         new_chunk_ins: &Chunk<K, V, A, ALLOC>,
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_chunk_ins`

warning: unused variable: `old_address`
    --> src/map/base.rs:1708:9
     |
1708 |         old_address: usize,
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_address`

warning: unused variable: `meta`
   --> src/map/obj_map.rs:113:29
    |
113 |     fn new(heap_ptr: usize, meta: &()) -> Self {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_meta`

warning: associated function `epoch_changed` is never used
   --> src/map/base.rs:675:8
    |
675 |     fn epoch_changed(&self, epoch: usize) -> bool {
    |        ^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `gc_entries` is never used
    --> src/map/base.rs:1992:8
     |
1992 |     fn gc_entries(&self) {
     |        ^^^^^^^^^^
     |
note: the lint level is defined here
    --> src/map/base.rs:1991:12
     |
1991 |     #[warn(dead_code)]
     |            ^^^^^^^^^

warning: associated function `swap_hop_bit` is never used
    --> src/map/base.rs:2071:8
     |
2071 |     fn swap_hop_bit(&self, idx: usize, src_pos: usize, dest_pos: usize) {
     |        ^^^^^^^^^^^^

warning: fields `a` and `b` are never read
   --> src/map/lite_map.rs:320:9
    |
319 |     struct SlimStruct {
    |            ---------- fields in this struct
320 |         a: u32,
    |         ^
321 |         b: u32,
    |         ^
    |
    = note: `SlimStruct` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `new` is never used
   --> src/map/lite_map.rs:325:12
    |
325 |         fn new(n: u32) -> Self {
    |            ^^^

warning: struct `MapConsts` is never constructed
  --> src/map/ptr_map.rs:28:8
   |
28 | struct MapConsts<K, V> {
   |        ^^^^^^^^^

warning: field `alloc` is never read
   --> src/map/ptr_map.rs:267:5
    |
265 | pub struct PtrValAttachmentItem<K, V> {
    |            -------------------- field in this struct
266 |     addr: usize,
267 |     alloc: *mut obj_alloc::Allocator<PtrValueNode<V>, ALLOC_BUFFER_SIZE>,
    |     ^^^^^
    |
    = note: `PtrValAttachmentItem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: constant `VAL_SIZE` is never used
   --> src/map/ptr_map.rs:875:11
    |
875 |     const VAL_SIZE: usize = 256;
    |           ^^^^^^^^

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:21:29
    |
21  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:51:29
    |
51  | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:81:29
    |
81  | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:111:29
    |
111 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:135:17
    |
135 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:170:17
    |
170 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:198:13
    |
198 |             deque.push_back(1);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:199:13
    |
199 |             deque.push_back(2);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:200:13
    |
200 |             deque.push_back(3);
    |             ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:220:33
    |
220 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:222:33
    |
222 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:254:33
    |
254 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:256:33
    |
256 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:280:17
    |
280 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:322:17
    |
322 |                 deque.push_front(i);
    |                 ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:334:37
    |
334 | ...                   deque.push_front(i);
    |                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:363:17
    |
363 |                 deque.push_back(i);
    |                 ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> src/par_list_test_macros.rs:375:37
    |
375 | ...                   deque.push_back(i);
    |                       ^^^^^^^^^^^^^^^^^^^
    |
   ::: src/ring_buffer.rs:632:5
    |
632 |     par_list_tests!({ RingBuffer::<_, CAP>::new() }, NUM);
    |     ----------------------------------------------------- in this macro invocation
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `par_list_tests` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `lightning-containers` (lib test) generated 41 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests src/lib.rs (/opt/optane/CargoTarget/x86_64-unknown-linux-gnu/debug/deps/lightning-50cfe14c723be791)

running 15 tests
test map::word_map::test::checking_inserion_with_migrations ... ok
test map::word_map::test::parallel_hybrid ... ok
test map::word_map::test::parallel_no_resize ... ok
test map::word_map::test::parallel_with_resize ... ok
test map::word_map::test::parallel_word_map_multi_mutex ... ok
test map::word_map::test::parallel_word_map_mutex ... ok
test map::word_map::test::resize ... ok
test map::word_map::test::resizing_after ... ok
test map::word_map::test::resizing_before ... ok
test map::word_map::test::resizing_with ... ok
test map::word_map::test::simple_resizing ... ok
test map::word_map::test::swap_no_resize ... ok
test map::word_map::test::swap_single_key ... ok
test map::word_map::test::swap_with_resize ... [2022-07-13T19:54:29Z ERROR lightning::map::word_map::test] Value checking after swap at epoch 1. Expecting Some(210000046) found Some(210000045). Probing for final value
FAILED
test map::word_map::test::will_not_overflow ... ok

failures:

---- map::word_map::test::swap_with_resize stdout ----
thread '<unnamed>' panicked at 'Value checking failed. Expecting Some(210000046) got Some(210000046) recovered from epoch 1 at 2 turn 0', src/map/word_map.rs:703:33
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: lightning::map::word_map::test::swap_with_resize::{{closure}}::{{closure}}
             at ./src/map/word_map.rs:703:33
   3: core::iter::traits::iterator::Iterator::for_each::call::{{closure}}
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:828:29
   4: core::iter::traits::iterator::Iterator::fold
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:2414:21
   5: core::iter::traits::iterator::Iterator::for_each
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:831:9
   6: lightning::map::word_map::test::swap_with_resize::{{closure}}
             at ./src/map/word_map.rs:700:25
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Any { .. }', src/map/word_map.rs:733:51
stack backtrace:
   0: rust_begin_unwind
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/panicking.rs:142:14
   2: core::result::unwrap_failed
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1805:5
   3: core::result::Result<T,E>::unwrap
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/result.rs:1098:23
   4: lightning::map::word_map::test::swap_with_resize::{{closure}}
             at ./src/map/word_map.rs:733:42
   5: core::iter::traits::iterator::Iterator::for_each::call::{{closure}}
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:828:29
   6: core::iter::traits::iterator::Iterator::fold
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:2414:21
   7: core::iter::traits::iterator::Iterator::for_each
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/iter/traits/iterator.rs:831:9
   8: lightning::map::word_map::test::swap_with_resize
             at ./src/map/word_map.rs:733:9
   9: lightning::map::word_map::test::swap_with_resize::{{closure}}
             at ./src/map/word_map.rs:658:5
  10: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
  11: core::ops::function::FnOnce::call_once
             at /rustc/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493/library/core/src/ops/function.rs:248:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.


failures:
    map::word_map::test::swap_with_resize

test result: FAILED. 14 passed; 1 failed; 0 ignored; 0 measured; 69 filtered out; finished in 57.80s

error: test failed, to rerun pass '--lib'
